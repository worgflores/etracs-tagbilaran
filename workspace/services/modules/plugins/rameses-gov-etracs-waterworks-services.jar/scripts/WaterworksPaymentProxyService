import com.rameses.annotations.*; 

class WaterworksPaymentProxyService {
	
	@Service('PaymentPostingHandler') 
	def handler; 	

	@Service('PaymentPostingService') 
	def service; 

	@DataContext(dynamic=true)
	def pmtEm;	

	@ProxyMethod 
	public def post( e ) {
		def pp = [ txntype: e.collectiontype.handler ]; 
		def payinfo = buildPostPaymentInfo( pp, e );
		payinfo.txntype = pp.txntype;
		payinfo.reftype = "cashreceipt";
		payinfo.refdate = e.receiptdate;
		payinfo.refno = e.receiptno;
		payinfo.refid = e.objid;
		payinfo.txndate = e.txndate;
		payinfo.amount = e.amount;
		payinfo.txnmode = e.txnmode;
		service.post( payinfo );
	}

	@ProxyMethod 
	public void reversePayment( e ) {
		def rct = e.receipt;
		rct.txntype = rct.collectiontype?.handler;
		if ( !rct.txntype ) throw new Exception("'txntype parameter' is required in BillingCashReceiptInterceptor.voidPayment"); 

		def vi = handler.getVoidInfo( rct ); 
		if ( !vi ) return; 

		if ( !vi._schemaname ) throw new Exception('please include _schemname in getVoidInfo'); 

		def pmtDb = pmtEm.lookup( vi._schemaname );
		def pmt = pmtDb.find([ refid: rct.objid ]).first(1);
		pmt.txntype = rct.txntype; 
		pmt.collectiontype = rct.collectiontype;
		pmt._schemaname = vi._schemaname;
		pmt.creditschemaname = vi.creditschemaname; 
		pmt._workflow = handler.getVoidWorkflow( pmt );  
		service.reversePayment( pmt );		
	}

	private def buildPostPaymentInfo( pp, bill ) {
		if ( !pp.txntype ) throw new Exception('txntype parameter is required');

		def m = [:]; 
		m.putAll( pp ); 
		m.putAll( bill ); 
		def payinfo = handler.getPaymentInfo( m ); 
		if ( !payinfo._schemaname ) throw new Exception("payinfo._schemaname is required");
		if ( !payinfo.items ) throw new Exception('payinfo.items is required'); 

		payinfo._workflow = handler.getPaymentWorkflow( m ); 
		return payinfo; 
	}		
}