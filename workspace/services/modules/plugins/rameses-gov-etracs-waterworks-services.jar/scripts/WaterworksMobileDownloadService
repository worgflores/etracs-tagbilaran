import com.rameses.annotations.*;
import java.rmi.server.*;
import com.rameses.util.*;
import com.rameses.functions.*;
import java.text.*;

class WaterworksMobileDownloadService {
	
	@DataContext("waterworks_mobile_header")
	def header;

	@DataContext("waterworks_mobile_info")
	def wm;

	@DataContext("waterworks_account")
	def wa;

	@DataContext("waterworks_stubout")
	def ws;

	@DataContext('collectiontype_account') 
	def cta;

	@DataContext('waterworks_sector_reader') 
	def wsr;

	@DataContext('waterworks_sector_zone') 
	def wsz;

	@DataContext('waterworks_billing_cycle') 
	def wbc;

	@Service("DateService")
	def dateSvc;

	@Service("WaterworksAccountBillingService")
	def billingSvc;

	@Service
	def self;

	@ProxyMethod
	public String initForDownload( o ){ 
		println 'init for download... '+ o.batchid;
		if ( !o.sectorid ) throw new Exception("sectorid is required!"); 

		if ( o.batchid ) {
			//do nothing, client is resuming the download...
		} else {
			def b = header.create([ state: 0 ]);
			o.batchid = b.batchid; 
		} 
		
		self.processDownload( o );
		return o.batchid; 
	} 



	@Async
	@ProxyMethod
	public def processDownload( o ) {
		// 1: get current date 
		def rundate = dateSvc.getServerDate();
		def rundatestr = new SimpleDateFormat('yyyy-MM-dd').format( rundate );

		// 2: get current billing cycle by sectorid and readingdate
		def bcc = wbc.find([ sectorid: o.sectorid ])
					 .where(' readingdate <= :rd ', [ rd: rundatestr ])
					 .orderBy(' objid desc ')
					 .first(); 

		if ( bcc == null ) {
			header.find([batchid: o.batchid]).update([ state:1 ]); 
			println '[WARN] No available billing cycle found for this reading period'; 
			return; 
		}

		def params = [ assigneeid: o.assigneeid, sectorid:o.sectorid, billingcycleid: bcc.objid ]; 
		def list = wm.getListForDownload( params ); 
		println 'process download list-size: '+ list.size();
		def df = new SimpleDateFormat("MM/dd/yyyy"); 
		list.each { 
			it.state = 'PENDING';
			it.rundate = rundate;
			it.barcode = '51030:' + it.acctno;
			it.batchid = o.batchid;
			it.billingcycle = bcc;
			it.month = bcc.month;
			it.year = bcc.year;
			it.discodate = bcc.disconnectiondate;
			it.period = df.format(bcc.fromperiod) + " - " + df.format(bcc.toperiod);
			it.info = wm.serializer.write([ 
				barangay: (it.barangayid? it.barangayid: ''), 
				classification: it.classificationid, 
				metersize: it.metersize 
			]);

			def items = billingSvc.getItemizedBilling([ acctid: it.objid ]); 
			if ( items==null ) items = []; 

			items.collect { bi-> 
				[title: bi.item.title + ' ' + ((!bi.remarks)?bi.remarks:''), amount: bi.amount ];
			} 
			it.items = wm.serializer.write( items ); 
			wm.create( it );
		} 
		header.find([batchid: o.batchid]).update([ state:1 ]); 
	}

	@ProxyMethod
	public int getBatchStatus( batchid ) {
		int state = header.find([batchid: batchid]).select("state").val();	
		if( state == 0 ) return -1;

		return wm.find([batchid:batchid]).select("x:{COUNT(*)}").val();
	}	

	@ProxyMethod
	public def download( o ) {
		println "fetch download " + o;
		if(!o.batchid) throw new Exception("Please specify batchid!"); 
		if(o._start == null) throw new Exception("Please specify _start!"); 
		if(o._limit == null) throw new Exception("Please specify _limit!"); 
		return wm.find([batchid:o.batchid]).list(o._start, o._limit);
	}

	@ProxyMethod
	def getSectorByUser( o ){
		if(!o.userid) throw new Exception("userid is required!");
		return wsr.find(['assignee.objid':o.userid]).select("sector.objid, sector.code").list().collect{[ objid: it.sector.objid, code: it.sector.code]};
	}

	@ProxyMethod
	def getZoneBySector( o ){
		if (!o.sectorid) throw new Exception("sectorid is required!");
		if(!o.userid) throw new Exception("userid is required!");
		return wsz.find(['reader.assignee.objid':o.userid, 'sectorid':o.sectorid]).select("objid,sectorid,code,description,readerid").list();
	}

	@ProxyMethod
	def getStuboutsBySector( o ){
		if (!o.sectorid) throw new Exception("sectorid is required!");
		if(!o.userid) throw new Exception("userid is required!");
		def list = [];
		def readerids = wsr.find(['assignee.objid':o.userid]).select("objid").list();
		readerids.each{ 
			def stubouts = ws.find(['zone.sector.objid':o.sectorid,'zone.reader.objid':it.objid]).list();
			list.addAll(stubouts);
		}
		return list;
	}

	@ProxyMethod
	def getReaderBySector( o ){
		if (!o.sectorid) throw new Exception("sectorid is required!");
		if (!o.userid) throw new Exception("userid is required!");
		return wsr.find([sectorid:o.sectorid,"assignee_objid":o.userid]).list();
	}
}