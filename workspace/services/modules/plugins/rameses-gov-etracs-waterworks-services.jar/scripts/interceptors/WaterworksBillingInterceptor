import com.rameses.annotations.*;

import java.rmi.server.UID;
import com.rameses.util.*;
import treasury.utils.*;
import treasury.facts.*;
import waterworks.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;

class WaterworksBillingInterceptor {
	
	@DataContext('waterworks_account')
	def acctEm; 

	@DataContext("vw_waterworks_consumption")
	def wcEm;

	@DataContext("waterworks_credit")
	def wcCreditEm;

	@DataContext("waterworks_otherfee")
	def wotherEm;

    @After(pattern="BillingInfoHandler.getHeaderInfo",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void loadHeaderInfo( evt ) {
		def obj = evt.args[0];
		def p = obj.params;
		def acct = null;
		try {
			if ( p.id ) {
				acct = acctEm.find([ acctno: p.id ]).first(1);
			} else if( p.objid ) {
				acct = acctEm.find([ objid: p.objid ]).first(1);
			} 
		}catch(ex){;}

		if ( !acct ) throw new Exception("Waterworks Account not found");

		def r = evt.result;
		r.putAll( acct );
		r.acctid = acct.objid;
		r.zone   = acct.stuboutnode?.zone; 
		r.sector = acct.stuboutnode?.sector; 
		r.schedule = acct.stuboutnode?.schedule; 
	}
 
    @After(pattern="BillingInfoHandler.getBillItems",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void loadBillItems(def evt) {
		def p = evt.args[0];
		def bill = p.headerinfo; 

		def arr = [];
		def wp = [ state: 'POSTED' ];

		if ( p.params.payoption ) { 
			arr << "((year * 12)+month) <= :yearmonth";
			wp.yearmonth = (p.params.payoption.year * 12)+p.params.payoption.month;
		} 

		def wheres = []; 
		wheres.addAll( arr );  
		wheres << " state = :state ";  
		wheres << "amount - amtpaid - discount > 0"; 

		def select = "hold,year,month,volume,amount:{amount-amtpaid-discount},principal:{amount},amtpaid,refid:{objid},reftype:{'waterworks_consumption'},duedate,discdate,fromdate:{fromperiod},todate:{toperiod}"; 
		def conList = wcEm.find([acctid: bill.acctid]).select(select).where(wheres.join(" AND "), wp).orderBy("year,month").list();
		def list = evt.result;
		list.addAll( conList );

		//select for other fees
		wheres = []; 
		wheres.addAll( arr );  
		wheres << "(amount - amtpaid - discount) > 0"; 
		select = "year,month,item.*,amount:{amount-amtpaid-discount},amtpaid,principal:{amount},refid:{objid},reftype:{'waterworks_otherfee'}";
		conList = wotherEm.find([acctid: bill.acctid]).select(select).where(wheres.join(" AND "), wp).orderBy("year,month").list();
		list.addAll( conList );
	}

 	@After(pattern="BillingInfoHandler.getCreditItems",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void loadCreditItems(def evt) {
		def p = evt.args[0];
		def bill = p.headerinfo; 

		def s =  "amount:{amtpaid-amount},refid:{objid},reftype:{'waterworks_credit'},item.*"
		def conList = wcCreditEm.find( [acctid: bill.acctid] ).where(" amount - amtpaid > 0 ").select(s).list();
		evt.result.addAll( conList );
	}

 	@After(pattern="BillingInfoHandler.beforeExecute",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void beforeExecute(def evt) { 
		def p = evt.args[0]; 
		if ( !p.params?.billitems ) return; 

		int iflag = 0; 
		def cons = p.params.billitems.findAll{( it.reftype.toString() == 'waterworks_consumption' )} 
		cons.each{ 
			if ( it.hold.toString() != '0' ) iflag = 1; 
			it._iflag = iflag; 
		} 

		def holdcons = cons.findAll{( it._iflag != 0 )} 
		p.params.billitems.removeAll( holdcons ); 
		cons.clear(); 

		def holdcon = (holdcons ? holdcons.first() : null); 
		holdcons.clear(); 

		def con = p.params.billitems.find{( it.reftype.toString() == 'waterworks_consumption' )} 

		if ( holdcon ) { 
			if ( con ) {
				// it contains valid consumption, just do nothing 
			} else if ( p.params.billitems.find{( it.reftype.toString() != 'waterworks_credit' )} ) {
				// it contains other fees, just do nothing 				
			} else {
				p.params.billitems.removeAll( p.params.billitems.findAll{( it.reftype.toString() == 'waterworks_credit' )} ); 
			}
			
			def billperiod = java.sql.Date.valueOf(''+ holdcon.year +'-'+ holdcon.month.toString().padLeft(2,'0') +'-01');
			def billperiodstr = new java.text.SimpleDateFormat('MMM-yyyy').format( billperiod ); 
			def errmsg = 'Ledger for '+ billperiodstr +' has been put on hold. Please verify.'; 
			throw new com.rameses.util.Warning( errmsg ); 
		} 

 
		def cre = p.params.billitems.find{( it.reftype == 'waterworks_credit' )} 
		if ( cre && con ) throw new Exception('Please have the ledger fix first. Arrears and Credits must not appear at the same time.'); 
	} 

	@After(pattern="FactBuilderService.getFacts",  eval="#{ args[0].rulename == 'waterworksbilling' }")
	public void buildFactsForBilling(def evt) {
		def data = evt.args[0].params;
		def zone = data.zone; 
		def sector = data.sector; 
		def schedule = data.schedule;
		if(  !schedule?.objid ) throw new Exception("Please specify a schedule for zone " + zone?.code +" sector "+ sector?.code );

		def factBuilder = evt.result;
		factBuilder.facts << new Sector( objid: sector?.objid);
		factBuilder.facts << new Zone( objid: zone?.objid,  sectorid: sector?.objid );
		factBuilder.facts << new WaterBlockSchedule( id: schedule.objid );
		if( data.meter?.objid ) {
			factBuilder.facts << new WaterMeter( data.meter );
		}

		factBuilder.billItemProvider.createBillItemFact = { o-> 
			if( o.reftype == 'waterworks_consumption' ) {
				return new WaterBillItem(o);
			}
			else if( o.reftype == 'waterworks_credit' ) {
				return new CreditBillItem( o );
			}
			else {
				return new MonthBillItem(o);
			}
		} 
		
		if( data.attributes ) {
			data.attributes*.attribute.each {
				factBuilder.facts << new WaterworksAttribute(name:it.name);
			}
		}
	}

	/*******************************************
    * CASH RECEIPT SPECFIC HANDLERS
	********************************************/
	//applicable for cash receipt billing
	@After( pattern="BillingInfoHandler.formatReceiptInfo", eval="#{  args[0].txntype?.contains('waterworks')  }")
	public void formatCashReceipt(def evt ) {
		def res = evt.result;
		def info = evt.args[0];
		if ( info.owner?.objid) {
			res.payer = info.owner;
		}
		res.paidby = info.acctname + " (" + info.acctno + ")";
		res.paidbyaddress = info.address?.text;
		res.acctno = info.acctno;
		res.acctid = info.objid;
	} 

	@After( pattern="BillingInfoHandler.formatCreditPaymentInfo", eval="#{  args[0].txntype?.contains('waterworks')  }")
	public void formatCreditPaymentInfo(def evt ) {
		def res = evt.result;
		res.refno = '11111';
		res.refdate = '2019-01-24';
		res.reftype = 'creditpayment';
		res.voided = 0;
	} 


	/***********************************************************
    * THIS IS BOTH USED BY CASH RECEIPT AND CAPTURE PAYMENT
	************************************************************/
	@After( pattern="PaymentPostingHandler.getPaymentInfo", eval="#{  args[0].txntype.toString().contains('waterworks')  }")
	public void loadPaymentInfo( evt ) { 
		def bill = evt.args[0]; 
		def result = evt.result; 
		result.objid = 'PMT'+ new java.rmi.server.UID().toString(); 
		result.parentid = bill.acctid; 
		result.rootid = bill.acctid; 
		result.items = bill.billitems; 
		result.items.each{ it.acctid = bill.acctid } 
		result._schemaname = 'waterworks_payment'; 
		result.creditschemaname = 'waterworks_credit'; 
		result.parentschemaname = "waterworks_account"; 
	} 

	@After( pattern="PaymentPostingHandler.getVoidInfo", eval="#{ args[0].txntype.toString().contains('waterworks') }")
	public void loadVoidInfo( evt ) {
		def p = evt.args[0];
		def result = evt.result;
		result._schemaname = 'waterworks_payment';
		result.creditschemaname = 'waterworks_credit';
	} 
}