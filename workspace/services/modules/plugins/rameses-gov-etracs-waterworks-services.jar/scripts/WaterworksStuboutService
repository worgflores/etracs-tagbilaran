import com.rameses.annotations.*;

class WaterworksStuboutService {
	

    @DataContext('waterworks_account') 
    def waterworks_account; 

    @DataContext('waterworks_stubout_node') 
    def stubout_node; 

    @ProxyMethod
    public def getNodes( def o ) {
        return stubout_node.find([stuboutid: o.stuboutid]).orderBy("indexno").list();
    }

    @ProxyMethod
    public void addNodes( o ) {
        if ( !o.stuboutid ) 
            throw new Exception("WaterworksStuboutService.addNodes error. Please pass parameter stuboutid");
        if ( !o.nodecount ) 
            throw new Exception("WaterworksStuboutService.addNodes error. Please pass parameter nodecount");
        if ( !o.startnode ) 
            throw new Exception("WaterworksStuboutService.addNodes error. Please pass parameter startnode");
        if ( !o.interval ) 
            throw new Exception("WaterworksStuboutService.addNodes error. Please pass parameter interval");

        /*
        def aggr = stubout_node.select("maxcount:{COUNT(*)}, maxindexno:{MAX(indexno)}").find([stuboutid: o.stuboutid]).first();
        if ( !aggr.maxindexno ) aggr.maxindexno = 0; 
        if ( aggr.maxcount != aggr.maxindexno ) { 
            // resolve the node gaps 
            for ( int idx=1; idx <= aggr.maxindexno; idx++ ) { 
                def map = [ stuboutid: o.stuboutid, indexno: idx ]; 
                def item = stubout_node.find( map ).first(); 
                if ( !item ) {
                    map.stubout = [objid: o.stuboutid];
                    stubout_node.create( map ); 
                }    
            } 
            // exit immediately after resolving the node gaps
            return;  
        } 
        */

        int counter = o.startnode.toInteger();
        for( int i=1; i <= o.nodecount.toInteger() ; i++ ) {
            def m = [stubout: [objid: o.stuboutid], indexno: counter ];
            stubout_node.create(m);  
            counter += o.interval.toInteger();    
        } 
    }

    @ProxyMethod
    public def assignAccount( o ) {
        if ( !o.objid ) throw new Exception("WaterworksStuboutService.assignAccount error. Please pass parameter objid");
        if ( !o.acctid ) throw new Exception("WaterworksStuboutService.assignAccount error. Please pass parameter acctid"); 

        //nullify it first    
        stubout_node.find([ acctid: o.acctid ]).update( [acctid: "{NULL}" ] );     

        stubout_node.find([ objid: o.objid ]).update([ acctid: o.acctid ]);  
        waterworks_account.find([ objid: o.acctid ]).update([ stuboutnodeid: o.objid ]);             
    }


    @ProxyMethod
    public def unassignAccount( o ) {
        if ( !o.objid ) throw new Exception("WaterworksStuboutService.assignAccount error. Please pass parameter objid");

        def oldAcctid = stubout_node.find( [objid: o.objid] ).select("acctid").val();    
        stubout_node.find( [objid: o.objid] ).update( [acctid: "{NULL}" ] );
        if(oldAcctid) {
            waterworks_account.find( [objid: oldAcctid] ).update([stuboutnodeid: "{NULL}"]);
        }
    }

    @ProxyMethod
    public def swap(def o) {
        if(! (o.item1?.objid && o.item1?.acctid) ) 
            throw new Exception("WaterworksStuboutService.swap error. Please pass parameter item1[objid,acctid]");
        if(! o.item2?.objid   )
            throw new Exception("WaterworksStuboutService.swap error. Please pass parameter item2[objid]");

        //nullify it first    
        stubout_node.find( [objid: o.item2.objid] ).update( [acctid: "{NULL}" ] );     
        
        stubout_node.find( [objid: o.item1.objid] ).update( [acctid: o.item2.acctid ] );  
        waterworks_account.find( [objid: o.item2.acctid] ).update([stuboutnodeid: o.item1.objid ]);    

        stubout_node.find( [objid: o.item2.objid] ).update( [acctid: o.item1.acctid ] );   
        waterworks_account.find( [objid: o.item1.acctid] ).update([stuboutnodeid:  o.item2.objid ]);           
    }

    @ProxyMethod
    public def updateIndexNo( def o ) {
        stubout_node.find([objid: o.objid]).update( [indexno: o.indexno ] );
    }

}