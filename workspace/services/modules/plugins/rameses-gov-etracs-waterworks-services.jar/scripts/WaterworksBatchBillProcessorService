import com.rameses.annotations.*;
import com.rameses.functions.*;

class WaterworksBatchBillProcessorService {
	
	@DataContext('waterworks_batch_billing')
	def batchEm; 

	@DataContext("waterworks_billing")
	def wbillEm;

	@DataContext("vw_waterworks_billing")
	def vw_billEm;



	@Service("WaterworksComputationService")
	def computeSvc;

	@Service("BillingProcessService")
	def billingSvc;

	@ProxyMethod 
	def getBilledStatus( param ) { 
		if ( !param.objid ) throw new Exception('objid parameter is required'); 
		def m = [batchid: param.objid]; 
		return batchEm.findBilledStatus( m ); 
	} 

	@ProxyMethod
	public def getForBillingList(def o) {
		return vw_billEm.find([batchid:o.batchid]).where("billed=0").orderBy("billno").select("objid,billno,acctid,meterid,consumptionid,meterstate").list(0, o._limit);
	}

	@ProxyMethod
	public void processBilling( o ) {
		//parameters must be objid,acctid and consumptionid 
		def u = [:];
		u.billed = 1;
		u.arrears = 0;
		u.surcharge = 0;
		u.interest = 0;
		u.otherfees = 0;
		u.credits = 0;


		def pp = [ objid : o.acctid ];
		if ( o.year && o.month ) {
			def ym = ((o.year * 12) + o.month)-1;
			pp.payoption = [year: (int)(ym/12), month: (int)(ym%12)];
		}

		def b = billingSvc.process([rulename:'waterworksbilling', params: pp]); 
		if( b?.billitems) {
			def arrears = b.billitems.findAll{ it.reftype == 'waterworks_consumption' }.sum{ it.amount  };
			def surcharge = b.billitems.findAll{it.surcharge}?.sum{ it.surcharge };
			def interest = b.billitems.findAll{it.interest}?.sum{ it.interest };
			def otherFees = b.billitems.findAll{ it.reftype == 'waterworks_otherfee' }?.sum{ it.amount };
			def credits = b.billitems.findAll{ it.reftype == 'waterworks_credit' }?.sum{ it.amount };

			if( arrears ) u.arrears = arrears;
			if( surcharge ) u.surcharge = surcharge;
			if( interest ) u.interest = interest;
			if( otherFees ) u.otherfees = otherFees;
			if( credits ) {
				u.credits = credits * -1;
			}	
		}
		//update the waterworks_billing.
		wbillEm.find([ objid: o.objid ]).update( u );

		//if there is no meter, run the computeSvc to get the volume and compute the consumption amount.
		if( !b.meterid ) {
			computeSvc.compute([acctid:o.acctid, consumptionid: o.consumptionid, meterstate: o.meterstate  ]);
		}
	}

	
} 